import Head from "next/head";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import { Table, Skeleton, TableProps  } from "antd";
import { useEffect, useState } from "react";
import ModalsForm from "@/components/Modal";
import { TypeBlog } from "@/type/type";
import { DeleteOutlined, EditOutlined } from "@ant-design/icons";
import moment from "moment";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [listBlogs, setListBlogs] = useState<TypeBlog[]>([]);
  const [showModal, setShowModal] = useState(false);
  const [editData, setEditData] = useState<TypeBlog>();

  //trigger modal
  const setOpenModal = (value: boolean) => {
    setShowModal(value);
  };

  //create blog
  const createBlog = (data: TypeBlog) => {
    let result = [];
    result.push(data);
    setListBlogs([...listBlogs, ...result]);
    localStorage.setItem("blogs", JSON.stringify(listBlogs.concat(result)));
  };

  useEffect(() => {
    if (!localStorage.getItem("blogs")) {
      localStorage.setItem("blogs", JSON.stringify([]));
    } else {
      if (localStorage?.getItem("blogs") !== null) {
        let listValues = localStorage?.getItem("blogs");
        let array = JSON.parse("[" + listValues + "]");
        setListBlogs(Object.values(array[0]));
      }
    }
  }, []);

  const columns = [
    {
      title: "Title",
      dataIndex: "title",
      key: "title",
    },
    {
      title: "Content",
      dataIndex: "content",
      key: "content",
    },
    {
      title: "Created By",
      dataIndex: "createdBy",
      key: "createdBy",
    },
    {
      title: "Created At",
      dataIndex: "createdAt",
      key: "createdAt",
      sorter: (a: any, b: any) => moment(a.createdAt).unix() - moment(b.createdAt).unix(),
      defaultSortOrder: 'descend',
      ellipsis: true,
    },
    {
      title: "Edit",
      dataIndex: "edit",
      key: "edit",
      onRow: (record: any) => {
        return {
          onClick: () => {
            console.log(record);
          },
        };
      },
      render: (text: string) => (
        <div className='action'>
          <EditOutlined />
        </div>
      ),
    },
    {
      title: "Delete",
      dataIndex: "delete",
      key: "delete",
      onRow: (record: any) => {
        return {
          onClick: () => {
            console.log(record);
          },
        };
      },
      render: (text: string) => (
        <div className='action'>
          <DeleteOutlined className='ml-10' />
        </div>
      ),
    },
  ];
  return (
    <>
      <Head>
        <title>Blogs attributes</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <div className={styles.description}>
          <h6>Blogs attributes</h6>
          <button onClick={() => setShowModal(true)}>Create Blog</button>
          <Table
            dataSource={listBlogs}
            columns={columns}
            pagination={false}
            rowKey={(r) => r.id}
          />
        </div>

        <ModalsForm
          showModal={showModal}
          setOpen={setOpenModal}
          createBlog={createBlog}
          editData={editData}
          dataLength={listBlogs.length}
        />
      </main>
    </>
  );
}
